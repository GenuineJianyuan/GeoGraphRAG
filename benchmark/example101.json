{
    "query": "Upsample MODIS landcover classification to Landsat resolution using supervised classifier",
    "datasource": [
        "MODIS/006/MCD12Q1",
        "LANDSAT/LE07/C02/T1"
    ],
    "raw_code": "//Egypt Classification\n\n// Upsample MODIS landcover classification (250m) to Landsat\n// resolution (30m) using a supervised classifier.\n\nvar geometry = ee.Geometry.Polygon(\n  [[[29.972731783841393, 31.609824974226175],\n    [29.972731783841393, 30.110383818311096],\n    [32.56550522134139, 30.110383818311096],\n    [32.56550522134139, 31.609824974226175]]], null, false);\n\n// Use the MCD12 land-cover as training data.\n// See the collection docs to get details on classification system.\nvar modisLandcover = ee.ImageCollection('MODIS/006/MCD12Q1')\n  .filterDate('2001-01-01', '2001-12-31')\n  .first()\n  .select('LC_Type1')\n  // Quick hack to get the labels to start at zero.\n  .subtract(1);\n\n// A palette to use for visualizing landcover images. You can get this\n// from the properties of the collection.\nvar landcoverPalette = '05450a,086a10,54a708,78d203,009900,c6b044,dcd159,' +\n  'dade48,fbff13,b6ff05,27ff87,c24f44,a5a5a5,ff6d4c,69fff8,f9ffa4,1c0dff';\n\n// A set of visualization parameters using the landcover palette.\nvar landcoverVisualization = {\n  palette: landcoverPalette,\n  min: 0,\n  max: 16,\n  format: 'png'\n};\n\n// Center map over the region of interest and display the MODIS landcover image.\nMap.centerObject(geometry, 11);\nMap.addLayer(modisLandcover, landcoverVisualization, 'MODIS landcover');\nprint(ee.Serializer.toReadableJSON(modisLandcover))\n// Load and filter Landsat data.\nvar l7 = ee.ImageCollection('LANDSAT/LE07/C02/T1')\n  .filterBounds(geometry)\n  .filterDate('2000-01-01', '2001-01-01');\n\n// Draw the Landsat composite, visualizing true color bands.\nvar landsatComposite = ee.Algorithms.Landsat.simpleComposite({\n  collection: l7,\n  asFloat: true\n});\nMap.addLayer(landsatComposite, {\n  min: 0,\n  max: 0.3,\n  bands: ['B3', 'B2', 'B1']\n}, 'Landsat composite');\nprint(ee.Serializer.toReadableJSON(landsatComposite))\n// Make a training dataset by sampling the stacked images.\nvar training = modisLandcover.addBands(landsatComposite).sample({\n  region: geometry,\n  scale: 30,\n  numPixels: 1000\n});\n\n// Train a classifier using the training data\nvar classifier = ee.Classifier.smileCart().train({\n  features: training,\n  classProperty: 'LC_Type1',\n});\n\n// Apply the classifier to the original composite.\nvar upsampled = landsatComposite.classify(classifier).clip(geometry);\n\n// Draw the upsampled landcover image.\nMap.addLayer(upsampled, landcoverVisualization, 'Upsampled landcover');\n\n\nprint(ee.Serializer.toReadableJSON(upsampled))",
    "api": [
        "ee.Geometry.Polygon",
        "ee.ImageCollection.filterDate",
        "ee.ImageCollection.first",
        "ee.Image.select",
        "ee.Image.subtract",
        "ee.Serializer.toReadableJSON",
        "Map.centerObject",
        "Map.addLayer",
        "ee.ImageCollection.filterBounds",
        "ee.Algorithms.Landsat.simpleComposite",
        "ee.Image.addBands",
        "ee.Image.sample",
        "ee.Classifier.smileCart.train",
        "ee.Image.classify",
        "ee.Image.clip"
    ],
    "processing step": [
        "Define region of interest using polygon geometry.",
        "Load MODIS landcover data and adjust labels.",
        "Visualize MODIS landcover with specified palette.",
        "Load and filter Landsat data for composite.",
        "Create Landsat true color composite for visualization.",
        "Generate training data by sampling stacked images.",
        "Train classifier using sampled training data.",
        "Apply classifier to Landsat composite for upsampling.",
        "Visualize upsampled landcover with the same palette."
    ],
    "output": "Upsampled landcover classification map."
}