{
    "query": "Terrain analysis and products generation",
    "datasource": [
        "DEM (USGS/SRTMGL1_003)",
        "Vector data (Point, Polygon)"
    ],
    "raw_code": "/**** Start of imports. If edited, may not auto-convert in the playground. ****/\nvar srtm = ee.Image(\"USGS/SRTMGL1_003\"),\n    roi = /* color: #98ff00 */ee.Geometry.Point([113.01032753176001, 35.34726635874763]),\n    area = \n    /* color: #0b4a8b */\n    /* shown: false */\n    ee.Geometry.Polygon(\n        [[[112.96697279062718, 35.36974212783401],\n          [112.97452589121312, 35.309248788570514],\n          [112.98843046274632, 35.311069850820175],\n          [113.00456663217992, 35.30280470066519],\n          [113.01847120371312, 35.2986017581174],\n          [113.03701063242406, 35.30252451128693],\n          [113.03254743662328, 35.31177024846144],\n          [113.055550061135, 35.332219185320675],\n          [113.06327482309788, 35.35238293325244],\n          [113.04250379648656, 35.37254164837369],\n          [112.97040601816624, 35.38023982913762]]]);\n/***** End of imports. If edited, may not auto-convert in the playground. *****/\n//Terrain Dem products\n\n//dem\nvar dem = ee.Image(srtm).clip(area);\nMap.centerObject(roi, 10);\nvar visParam = {min:0, max:3000, palette:[\"green\", \"blue\", \"red\"]};\nMap.addLayer(dem, visParam, \"dem\");\nprint(dem);\n\n//aspect\nvar aspect = ee.Terrain.aspect(dem);\nvar cosImg = aspect.divide(180).multiply(Math.PI).cos();\nMap.addLayer(cosImg, {min:-1, max:1}, \"cosImg\", false);\n\n//hillshade\nvar hillshade = ee.Terrain.hillshade(dem);\nMap.addLayer(hillshade, {}, \"hillshade\", false);\nprint(hillshade);\n//slope\nvar slope = ee.Terrain.slope(dem);\nprint(slope);\nMap.addLayer(slope, {min:0, max:60}, \"slope\", false);\n\n//products\nvar products = ee.Terrain.products(dem);\nprint(products);\nMap.addLayer(products, {}, \"products\", false);\n\n//fillMinima\nvar fillMinima = ee.Terrain.fillMinima(dem, 10);\nMap.addLayer(fillMinima, {}, \"fillMinima\", false);\n\n//compute\nvar meanDict = dem.reduceRegion({\n  reducer: ee.Reducer.mean(),\n  geometry: area,\n  scale:90\n});\nprint(meanDict);\nvar mean = meanDict.get(\"elevation\");\nprint(\"mean evelation: \", mean);",
    "api": [
        "ee.Image",
        "ee.Geometry.Point",
        "ee.Geometry.Polygon",
        "ee.Image.clip",
        "Map.centerObject",
        "Map.addLayer",
        "ee.Terrain.aspect",
        "ee.Image.divide",
        "ee.Image.multiply",
        "ee.Image.cos",
        "ee.Terrain.hillshade",
        "ee.Terrain.slope",
        "ee.Terrain.products",
        "ee.Terrain.fillMinima",
        "ee.Image.reduceRegion",
        "ee.Reducer.mean"
    ],
    "processing step": [
        "Import SRTM elevation data and define region of interest.",
        "Clip elevation data to the defined area.",
        "Visualize elevation data with a color palette.",
        "Calculate aspect and cosine of aspect.",
        "Generate hillshade from elevation data.",
        "Compute slope from elevation data.",
        "Calculate terrain products including slope and aspect.",
        "Fill minima in elevation data.",
        "Compute mean elevation within the area."
    ],
    "output": "**raster**"
}