{
    "query": "Radar Vegetation Index calculation and analysis",
    "datasource": [
        "Sentinel-1 GRD data",
        "Region of interest (vector)"
    ],
    "raw_code": "var geometry = ee.Geometry.Polygon([[[-78.50535831769301, 0.0005433845999079939],[-78.50535831769301, -0.08219737089614038],[-78.43738041241957, -0.08219737089614038],[-78.43738041241957, 0.0005433845999079939]]], null, false);\n\nvar S1_1=ee.ImageCollection(\"COPERNICUS/S1_GRD\")\n  .filterDate('2020-01-01','2020-01-14')\n  .filterBounds(geometry)\n  .filterMetadata('orbitProperties_pass','equals','DESCENDING');\nvar S1_2=ee.ImageCollection(\"COPERNICUS/S1_GRD\")\n  .filterDate('2020-01-14','2020-02-01')\n  .filterBounds(geometry)\n  .filterMetadata('orbitProperties_pass','equals','DESCENDING');\n\nfunction addRVI(image){\n  var RVI=image.expression('sqrt(1-(VV/(VV+VH)))*(4*VH/(VH+VV))/100',{\n    VH: image.select('VH'),\n    VV: image.select('VV')\n  }).rename('RVI');\n  return image.addBands(RVI);\n}\n\nvar SR_1=S1_1.map(addRVI);\nvar SR_2=S1_2.map(addRVI);\n\nprint(S1_1);\nMap.addLayer(S1_1.mean());\nMap.addLayer(SR_1.mean());\nprint(S1_2);\nMap.addLayer(S1_2.mean());\nMap.addLayer(SR_2.mean());",
    "api": [
        "ee.Geometry.Polygon",
        "ee.ImageCollection",
        "ee.ImageCollection.filterDate",
        "ee.ImageCollection.filterBounds",
        "ee.ImageCollection.filterMetadata",
        "ee.Image.expression",
        "ee.Image.select",
        "ee.Image.rename",
        "ee.Image.addBands",
        "ee.ImageCollection.map",
        "ee.Image.mean",
        "Map.addLayer"
    ],
    "processing step": [
        "Define study area geometry.",
        "Filter Sentinel-1 data by date and location.",
        "Filter Sentinel-1 data by orbit pass direction.",
        "Define function to calculate RVI.",
        "Apply RVI function to image collections.",
        "Compute mean of raw Sentinel-1 collections.",
        "Compute mean of RVI-enhanced collections.",
        "Display raw and RVI-enhanced results on map."
    ],
    "output": "**Map showing RVI imagery**"
}