{
    "query": "Land use/cover classification using CART classifier",
    "datasource": [
        "Sentinel-2 SR imagery",
        "Vector data (ROI and training samples)"
    ],
    "raw_code": "/**** Start of imports. If edited, may not auto-convert in the playground. ****/\nvar Porto_Seguro = ee.FeatureCollection(\"users/akelsaliba02/Porto_Seguro\");\n/***** End of imports. If edited, may not auto-convert in the playground. *****/\n// Shape\n\nMap.addLayer(Porto_Seguro)\n\n\n// Imagem Sentinal\n\nvar image = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n\n.filterDate('2020-01-01', '2020-01-31')\n\n.filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', 3)\n\n.filterBounds(Porto_Seguro)\n\n.median();\n\n\nvar visParamsTrue = {bands: ['B4', 'B3', 'B2'], min: 0, max: 2500, gama: 1.1};\nMap.addLayer(image.clip(Porto_Seguro), visParamsTrue, 'Sentinel_2021')\nMap.centerObject(Porto_Seguro, 8)\n\n\n// Teste de criação de data\n\nvar training = Massa_Dagua.merge(Areia).merge(Area_Urbana).merge(Rodovia).merge(Vegetacao).merge(Agropecuaria).merge(Veg_Baixa).merge(Outros);\nprint(training);\n\n\nvar label = 'class';\nvar bands = ['B2', 'B3', 'B4'];\nvar input = image.select(bands);\n\n\n// Overlay the points on the imagery\nvar trainImage = input.sampleRegions({\n  collection: training,\n  properties: [label],\n  scale: 10\n});\n\n\nvar trainingData = trainImage.randomColumn();\nvar trainSet = trainingData.filter(ee.Filter.lessThan('random', 0.20));\nvar trainSet = trainingData.filter(ee.Filter.greaterThanOrEquals('random', 0.20));\n\n\n// Modelo de Classificacao\nvar classificacao = ee.Classifier.smileCart().train(trainSet, label, bands);\n\n\n// Classificando a imaggem\nvar classificando = input.classify(classificacao);\n\n\n\n\n// Definindo a paleta para classificacao\nvar paletadecores =[\n  '246fd6', //Massa_Dagua (0)\n  'fff6a6', //Areia (1)\n  'ff3c09', //Area_Urbana (2)\n  '261e07', //Rodovia (3)\n  '1acc1c', //Vegetacao (4)\n  '33ff3e', //Veg_Baixa (5)\n  'c28521', //Agropecuaria (6)\n  'ffffff', //outros (7)\n  ];\n  Map.addLayer(classificando.clip(Porto_Seguro), {paleta: paletadecores, min:0, max:7}, 'Classification CART' )",
    "api": [
        "ee.FeatureCollection",
        "ee.ImageCollection",
        "ee.ImageCollection.filterDate",
        "ee.ImageCollection.filterMetadata",
        "ee.ImageCollection.filterBounds",
        "ee.ImageCollection.median",
        "ee.Image.clip",
        "Map.addLayer",
        "Map.centerObject",
        "ee.Image.select",
        "ee.Image.sampleRegions",
        "ee.Filter.lessThan",
        "ee.Filter.greaterThanOrEquals",
        "ee.Classifier.smileCart",
        "ee.Classifier.train",
        "ee.Image.classify"
    ],
    "processing step": [
        "Load feature collection for the area of interest.",
        "Filter Sentinel-2 imagery by date and cloud cover.",
        "Clip imagery to the area of interest.",
        "Merge training data classes into a single collection.",
        "Sample imagery using training data points.",
        "Split data into training and testing sets.",
        "Train CART classifier using training data.",
        "Classify imagery using trained classifier.",
        "Visualize classification results with a color palette."
    ],
    "output": "Raster land cover classification map."
}