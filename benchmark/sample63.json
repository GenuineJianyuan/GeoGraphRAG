{
    "query": "Identify flood-prone areas and affected population",
    "datasource": [
        "Sentinel-1 SAR data",
        "WorldPop population data",
        "Administrative boundaries"
    ],
    "raw_code": "var region = ee.FeatureCollection('FAO/GAUL/2015/level0').filter(ee.Filter.eq('ADM0_NAME', 'Bangladesh'));\n\nvar sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')\n    .filterBounds(region)\n    .filterDate('2020-01-01', '2020-12-31')\n    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n    .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))\n    .mean()\n    .clip(region);\n\nvar floodedArea = sentinel1.select('VV').lt(-15).selfMask();\n\nvar population = ee.ImageCollection('WorldPop/GP/100m/pop')\n    .filterDate('2020-01-01', '2020-12-31')\n    .mean()\n    .clip(region);\n\nvar affectedPopulation = floodedArea.multiply(population)\n    .reduceRegion({\n        reducer: ee.Reducer.sum(),\n        geometry: region.geometry(),\n        scale: 100,\n        maxPixels: 1e9\n    });",
    "api": [
        "ee.FeatureCollection",
        "ee.Filter.eq",
        "ee.ImageCollection",
        "ee.Filter.listContains",
        "ee.Filter.eq",
        "ee.ImageCollection.mean",
        "ee.Image.clip",
        "ee.Image.select",
        "ee.Image.lt",
        "ee.Image.selfMask",
        "ee.Image.multiply",
        "ee.Image.reduceRegion",
        "ee.Reducer.sum"
    ],
    "processing step": [
        "Filter region of interest from global dataset",
        "Filter SAR images by bounds and date",
        "Select specific polarization and orbit",
        "Calculate mean of filtered SAR images",
        "Identify flooded areas using threshold",
        "Filter population data by date",
        "Calculate mean population density",
        "Multiply flooded area by population",
        "Compute total affected population"
    ],
    "output": "Numerical: Total affected population in flooded areas."
}