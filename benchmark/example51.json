{
    "query": "Visualize cloud-masked Sentinel-2 imagery",
    "datasource": [
        "Sentinel-2 SR",
        "user-provided vector data"
    ],
    "raw_code": "/**\n * Function to mask clouds using the Sentinel-2 QA band\n * @param {ee.Image} image Sentinel-2 image\n * @return {ee.Image} cloud masked Sentinel-2 image\n */\nfunction maskS2clouds(image) {\n  var qa = image.select('QA60');\n\n  // Bits 10 and 11 are clouds and cirrus, respectively.\n  var cloudBitMask = 1 << 10;\n  var cirrusBitMask = 1 << 11;\n\n  // Both flags should be set to zero, indicating clear conditions.\n  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)\n      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));\n\n  return image.updateMask(mask).divide(10000);\n}\n\nvar dataset = ee.ImageCollection('COPERNICUS/S2_SR')\n                  .filterDate('2020-01-11', '2020-01-21')\n                  // Pre-filter to get less cloudy granules.\n                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))\n                  .map(maskS2clouds);\n\n//Step 1\n//Get the Sharqiya Governorate Boundary\nvar region = ee.FeatureCollection(\"users/GISSpecialist/Shams\");\naddLayer(region)\n\n//Locate center and zoom level\nMap.centerObject(region,10);\n\nvar visualization = {\n  min: 0.0,\n  max: 0.3,\n  bands: ['B4', 'B3', 'B2'],\n};\n\n//Map.setCenter(region, 12);\n\nMap.addLayer(dataset.mean(), visualization, 'RGB');",
    "api": [
        "ee.Image.select",
        "ee.Image.bitwiseAnd",
        "ee.Image.eq",
        "ee.Image.and",
        "ee.Image.updateMask",
        "ee.Image.divide",
        "ee.ImageCollection.filterDate",
        "ee.Filter.lt",
        "ee.ImageCollection.map",
        "ee.FeatureCollection",
        "Map.addLayer",
        "Map.centerObject"
    ],
    "processing step": [
        "Mask clouds using Sentinel-2 QA band",
        "Filter image collection by date and cloud percentage",
        "Apply cloud mask to each image in collection",
        "Load geospatial boundary for the region",
        "Set map center to the region boundary",
        "Define visualization parameters for RGB bands",
        "Display mean RGB image of the collection"
    ],
    "output": "The output is a **map** displaying Sentinel-2 RGB imagery."
}