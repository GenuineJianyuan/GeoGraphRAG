{
    "query": "Land cover classification",
    "datasource": [
        "Sentinel2",
        "vector data (user-provided samples)"
    ],
    "raw_code": "var se2 = ee.ImageCollection(\"COPERNICUS/S2\"),\n    examples = ee.FeatureCollection(\"users/rgoldblatt/Training/MyanmarSamples_20190611\");\nMap.setCenter(98.24,22.16,12);\nMap.addLayer(examples, {},'labled examples');\nvar SE2_2019 = se2\n    .filterDate('2019-01-01','2019-05-30')\n    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5))\n    .median();\nMap.addLayer(SE2_2019,{bands: ['B4', 'B3', 'B2'], min: 608, max: 1904},'SE2_2019');\nvar ndvi = SE2_2019.normalizedDifference(['B4', 'B8']).rename('NDVI');\nvar SE2_2019WithNDVI = SE2_2019.addBands(ndvi);\nvar bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A','B11', 'B12', 'NDVI'];\nvar training = SE2_2019WithNDVI.select(bands).sampleRegions({\n  collection: examples, \n  properties: ['val'], \n  scale: 30\n}); \nvar classifier = ee.Classifier.randomForest({numberOfTrees: 20})\n.train({\n  features: training, \n  classProperty: 'val', \n  inputProperties: bands\n});\nvar classified = SE2_2019WithNDVI.select(bands).classify(classifier);\nMap.addLayer(classified, {min:0, max:3}, 'classified image');",
    "api": [
        "ee.ImageCollection",
        "ee.FeatureCollection",
        "Map.setCenter",
        "Map.addLayer",
        "ee.ImageCollection.filterDate",
        "ee.ImageCollection.filter",
        "ee.Filter.lt",
        "ee.ImageCollection.median",
        "ee.Image.normalizedDifference",
        "ee.Image.rename",
        "ee.Image.addBands",
        "ee.Image.select",
        "ee.Image.sampleRegions",
        "ee.Classifier.randomForest",
        "ee.Classifier.train",
        "ee.Image.classify"
    ],
    "processing step": [
        "Load Sentinel-2 image collection",
        "Load labeled training examples",
        "Filter images by date and cloud cover",
        "Compute median image from filtered collection",
        "Calculate NDVI and add it as a band",
        "Select bands and sample regions for training",
        "Train Random Forest classifier",
        "Classify image using trained classifier",
        "Display classified image on map"
    ],
    "output": "Classified land cover raster map."
}