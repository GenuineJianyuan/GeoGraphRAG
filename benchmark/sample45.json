{
    "query": "Analyze earthquake risk levels and buffer zones",
    "datasource": [
        "Administrative boundary vector data",
        "Earthquake point vector data"
    ],
    "raw_code": "var guizhouBoundary = ee.FeatureCollection(\"users/your_username/guizhou_shapefile\");\nvar earthquakeData = ee.FeatureCollection(\"users/your_username/earthquake_shapefile\");\n\nvar validEarthquake = earthquakeData.filter(ee.Filter.gt('people', 0));\n\nvar latEq = validEarthquake.aggregate_array('纬度');\nvar lonEq = validEarthquake.aggregate_array('经度');\nvar threatPopulation = validEarthquake.aggregate_array('people');\n\nvar pointSize = threatPopulation.map(function(pop) { return ee.Number(pop).divide(100).max(10); });\n\nMap.centerObject(guizhouBoundary, 7);\nMap.addLayer(guizhouBoundary, {color: 'black'}, 'Guizhou Boundary');\n\nvalidEarthquake.evaluate(function(features) {\n  features.features.forEach(function(feature, index) {\n    var lat = feature.properties['纬度'];\n    var lon = feature.properties['经度'];\n    var size = pointSize.get(index);\n    Map.addLayer(ee.Geometry.Point(lon, lat), {color: 'red', pointSize: size}, 'Earthquake Point ' + index);\n  });\n});\n\nvar bufferRadiusKm = 5;\nvar bufferRadiusDeg = bufferRadiusKm / 111;\n\nvalidEarthquake = validEarthquake.map(function(feature) {\n  var point = feature.geometry();\n  var buffer = point.buffer(bufferRadiusDeg * 1000);\n  return feature.set('buffer', buffer);\n});\n\nvalidEarthquake.evaluate(function(features) {\n  features.features.forEach(function(feature) {\n    var buffer = feature.properties['buffer'];\n    Map.addLayer(buffer, {color: 'blue', opacity: 0.5}, 'Buffer for Earthquake');\n  });\n});\n\nvar riskLevels = validEarthquake.map(function(feature) {\n  var pop = feature.get('people');\n  var risk;\n  if (pop <= 100) {\n    risk = 'Low Risk';\n  } else if (pop <= 500) {\n    risk = 'Medium Risk';\n  } else if (pop <= 1000) {\n    risk = 'High Risk';\n  } else {\n    risk = 'Very High Risk';\n  }\n  return feature.set('riskLevel', risk);\n});\n\nvar riskColors = {\n  'Low Risk': 'green',\n  'Medium Risk': 'yellow',\n  'High Risk': 'orange',\n  'Very High Risk': 'red'\n};\n\nvalidEarthquake.evaluate(function(features) {\n  features.features.forEach(function(feature) {\n    var risk = feature.properties['riskLevel'];\n    var lat = feature.properties['纬度'];\n    var lon = feature.properties['经度'];\n    Map.addLayer(ee.Geometry.Point(lon, lat), {color: riskColors[risk], pointSize: 10}, risk);\n  });\n});",
    "api": [
        "ee.FeatureCollection",
        "ee.Filter.gt",
        "ee.FeatureCollection.filter",
        "ee.FeatureCollection.aggregate_array",
        "ee.Number.divide",
        "ee.Number.max",
        "Map.centerObject",
        "Map.addLayer",
        "ee.Geometry.Point",
        "ee.Array.map",
        "ee.Geometry.buffer",
        "ee.Feature.set",
        "ee.Feature.get",
        "ee.Feature.geometry"
    ],
    "processing step": [
        "Load Guizhou boundary and earthquake data",
        "Filter earthquakes with positive population impact",
        "Extract latitude, longitude, and population data",
        "Calculate point size based on population",
        "Display Guizhou boundary on map",
        "Add earthquake points with size on map",
        "Create buffer zones around earthquake points",
        "Classify risk levels based on population",
        "Display risk levels with color-coded points"
    ],
    "output": "Map showing earthquake risk levels."
}