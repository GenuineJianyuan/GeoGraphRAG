{
    "query": "Vegetation and burn index analysis",
    "datasource": [
        "Sentinel-2",
        "Point geometry"
    ],
    "raw_code": "/**** Start of imports. If edited, may not auto-convert in the playground. ****/\nvar tochka = /* color: #ffc82d */ee.Geometry.Point([108.29867935714722, 59.53460254109312]);\n/***** End of imports. If edited, may not auto-convert in the playground. *****/\nvar visParams = {bands: ['B4', 'B3', 'B2'], min: 0, max: 2048, gamma: 1.5};\n\nvar palettes = require('users/gena/packages:palettes');\n\nvar grad = palettes.cmocean.Thermal [7];\n\n\nMap.centerObject(tochka, 10)\n\n\nvar s2_before = ee.ImageCollection(\"COPERNICUS/S2\")\n\n            .filterBounds(tochka)\n\n            .filter(ee.Filter.date('2021-05-10', '2021-06-01'))\n\n            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10));\n            \nvar s2_inTime = ee.ImageCollection(\"COPERNICUS/S2\")\n\n            .filterBounds(tochka)\n\n            .filter(ee.Filter.date('2021-06-02', '2021-06-20'))\n\n            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10));\n            \nvar s2_after = ee.ImageCollection(\"COPERNICUS/S2\")\n\n            .filterBounds(tochka)\n\n            .filter(ee.Filter.date('2021-08-15', '2021-09-30'))\n\n            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10));\n\n\nMap.addLayer(s2_before, visParams, 'Sentinel-2 before');\nMap.addLayer(s2_inTime, visParams, 'Sentinel-2 in time');\nMap.addLayer(s2_after, visParams, 'Sentinel-2 after');\n\n\nfunction addNDVI(image) {\n  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');\n  return image.addBands(ndvi)\n}\n\n\nfunction addNBR(image) {\n  var nbr = image.normalizedDifference(['B8', 'B12']).rename('NBR');\n  return image.addBands(nbr)\n}\n\n\nvar ndvi_before = s2_before.map(addNDVI);\nvar ndvi_in = s2_inTime.map(addNDVI);\nvar ndvi_after = s2_after.map(addNDVI);\n\n\nvar palNDVI = ['#8bc4f9', '#c9995c', '#c7d270', '#8add60', '#097210'];\nvar visNDVI = {bands:['NDVI'], min: -0.1, max: 0.6, palette: palNDVI};\n\n\nMap.addLayer(ndvi_before, visNDVI, 'NDVI_Before');\nMap.addLayer(ndvi_in, visNDVI, 'NDVI_IN');\nMap.addLayer(ndvi_after, visNDVI, 'NDVI_After');\n\n\nvar nbr_before = s2_before.map(addNBR);\nvar nbr_in = s2_inTime.map(addNBR);\nvar nbr_after = s2_after.map(addNBR);\n\n\nvar visNBR = {bands:['NBR'], min: -0.4, max: 0.4, palette: grad};\n\n\nMap.addLayer(nbr_before, visNBR, 'NBR_Before');\nMap.addLayer(nbr_in, visNBR, 'NBR_IN');\nMap.addLayer(nbr_after, visNBR, 'NBR_After');",
    "api": [
        "ee.Geometry.Point",
        "ee.ImageCollection",
        "ee.Filter.date",
        "ee.Filter.lt",
        "ee.Image.normalizedDifference",
        "ee.Image.addBands",
        "Map.centerObject",
        "Map.addLayer"
    ],
    "processing step": [
        "Import geometry point and set visualization parameters.",
        "Load Sentinel-2 image collections for three periods.",
        "Filter images by location and cloud cover percentage.",
        "Add NDVI and NBR bands to each image collection.",
        "Visualize Sentinel-2 images with RGB bands.",
        "Visualize NDVI layers with custom color palette.",
        "Visualize NBR layers using thermal color palette."
    ],
    "output": "Map displaying NDVI and NBR indices."
}