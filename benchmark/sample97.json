{
    "query": "Land cover classification using Sentinel-2 imagery",
    "datasource": [
        "Sentinel-2",
        "Vector sample data"
    ],
    "raw_code": "var se2 = ee.ImageCollection(\"COPERNICUS/S2\"),\n    examples = ee.FeatureCollection(\"users/rgoldblatt/Training/MyanmarSamples_20190611\");\nMap.setCenter(98.24,22.16,12);\nMap.addLayer(examples, {},'Labeled Examples');\n\nvar SE2_2019 = se2\n  .filterDate('2019-01-01','2019-05-30')\n  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5))\n  .median();\n\nMap.addLayer(SE2_2019,{bands: ['B4', 'B3', 'B2'], min: 608, max: 1904},'S2 2019 Filtered Image');\n\nvar ndvi = SE2_2019.normalizedDifference(['B4', 'B8']).rename('NDVI');\nvar SE2_2019WithNDVI = SE2_2019.addBands(ndvi);\n\nvar bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12', 'NDVI'];\n\nvar training = SE2_2019WithNDVI.select(bands).sampleRegions({\n  collection: examples, \n  properties: ['val'], \n  scale: 30\n}); \n\nvar classifier = ee.Classifier.randomForest({numberOfTrees: 20})\n.train({\n  features: training, \n  classProperty: 'val', \n  inputProperties: bands\n});\n\nvar classified = SE2_2019WithNDVI.select(bands).classify(classifier);\nMap.addLayer(classified, {min:0, max:3}, 'Classified Image');",
    "api": [
        "ee.ImageCollection",
        "ee.FeatureCollection",
        "Map.setCenter",
        "Map.addLayer",
        "ee.ImageCollection.filterDate",
        "ee.ImageCollection.filter",
        "ee.Filter.lt",
        "ee.ImageCollection.median",
        "ee.Image.normalizedDifference",
        "ee.Image.rename",
        "ee.Image.addBands",
        "ee.Image.select",
        "ee.Image.sampleRegions",
        "ee.Classifier.randomForest",
        "ee.Classifier.train",
        "ee.Image.classify"
    ],
    "processing step": [
        "Load Sentinel-2 image collection.",
        "Load labeled training examples.",
        "Filter images by date and cloud cover.",
        "Calculate median composite image.",
        "Compute NDVI and add as new band.",
        "Select relevant spectral bands and NDVI.",
        "Sample image values at training locations.",
        "Train Random Forest classifier.",
        "Classify image using trained model."
    ],
    "output": "Classified raster image."
}