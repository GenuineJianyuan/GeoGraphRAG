{
    "query": "Water body identification using Sentinel-1 and Sentinel-2 data",
    "datasource": [
        "MERIT Hydro dataset",
        "SRTM DEM",
        "Sentinel-1 GRD",
        "Sentinel-2 SR",
        "Region of interest (vector)"
    ],
    "raw_code": "var geometry = ee.Geometry.Polygon(\n        [[[115.06774916584675, 33.697965961357625],\n          [115.06774916584675, 28.50841749797373],\n          [122.01110854084675, 28.50841749797373],\n          [122.01110854084675, 33.697965961357625]]], null, false);\n\n\n//水文模型，坡度模型\nvar handMask=ee.Image(\"MERIT/Hydro/v1_0_1\").select('hnd').gte(20).not();\nvar slopeMask=ee.Terrain.slope(ee.Image(\"CGIAR/SRTM90_V4\")).gte(10).not();\n\n\n\n//setinel-1\n\n    //去噪声(中值滤波处理)\n    function deNoising(img){\n      var vv=img.select('VV');\n      var vh=img.select('VH');\n      var vv_smoothed=vv.focalMedian(1.5,'square','pixels',1).rename('vv_smoothed');\n      var vh_smoothed=vh.focalMedian(1.5,'square','pixels',1).rename('vh_smoothed');\n      return img.addBands(vv_smoothed).addBands(vh_smoothed);\n    }\n    \n    \n    //数据准备\n    var _sdate = ee.Date('2020-03-01')\n    var _edate = ee.Date('2020-06-01')\n    var s1 =  ee.ImageCollection(\"COPERNICUS/S1_GRD\")\n      .filterBounds(geometry)\n      .filterDate(_sdate, _edate)\n      .filter(ee.Filter.and(\n      ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'),\n      ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'),\n      ee.Filter.eq('instrumentMode', 'IW')\n      ))\n      .map(deNoising)//去噪声\n      .min();\n    //水体识别\n    var water1=s1.select('vh_smoothed').lte(-23)\n                 .updateMask(slopeMask).updateMask(handMask)\n                 .clip(geometry)\n    \n    Map.addLayer(water1,{  min: 0,max: 1, palette: ['white','blue']}, 'water1');\n\n\n//setinel-2\n\n\n  //NDWI\n  function NDWI(image){\n    var ndwi = image.normalizedDifference(['B3','B8'])\n     ndwi=ndwi.updateMask(slopeMask).updateMask(handMask).clip(geometry).rename('ndwi');\n  return image.addBands(ndwi) ;\n  }\n  //首先对数据进行去云处理   \n  function s2_rmcloud(image) {\n  var quality = image.select(\"QA60\").unmask();\n  return image.updateMask(quality.eq(0));\n  };\n  //数据准备\n  var s2 = ee.ImageCollection(\"COPERNICUS/S2_SR\").filterBounds(geometry)\n            .filterDate(_sdate, _edate)\n            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',30))\n            .map(s2_rmcloud)\n            .map(NDWI);\n  //水体识别            \n  var water2 = s2.select('ndwi').max().gt(0);\n  Map.addLayer(water2,{  min: 0,max: 1, palette: ['white','blue']}, 'water2');",
    "api": [
        "ee.Geometry.Polygon",
        "ee.Image.select",
        "ee.Image.gte",
        "ee.Image.not",
        "ee.Terrain.slope",
        "ee.ImageCollection.filterBounds",
        "ee.ImageCollection.filterDate",
        "ee.Filter.and",
        "ee.Filter.listContains",
        "ee.Filter.eq",
        "ee.Image.focalMedian",
        "ee.Image.rename",
        "ee.Image.addBands",
        "ee.Image.min",
        "ee.Image.lte",
        "ee.Image.updateMask",
        "ee.Image.clip",
        "ee.Image.normalizedDifference",
        "ee.Image.unmask",
        "ee.Image.gt",
        "ee.Image.max"
    ],
    "processing step": [
        "Define study area geometry using polygon.",
        "Create masks for hydrological and slope conditions.",
        "Apply median filter to reduce noise in Sentinel-1 data.",
        "Filter and prepare Sentinel-1 data for analysis.",
        "Identify water bodies using smoothed VH band.",
        "Remove clouds from Sentinel-2 data using QA band.",
        "Calculate NDWI for Sentinel-2 images.",
        "Identify water bodies using NDWI threshold."
    ],
    "output": "Map showing detected water bodies."
}