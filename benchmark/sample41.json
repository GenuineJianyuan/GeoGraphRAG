{
    "query": "Carbon emission hotspot and clustering analysis",
    "datasource": [
        "Carbon emission raster data"
    ],
    "raw_code": "// ================== Module1: Environment Setup ==================\n// Define the input path for the carbon emission raster file (assuming it is already uploaded to GEE)\nvar carbonEmission = ee.Image(\"users/your_username/BTHemission\"); // 替换为你上传的文件路径\n\n// ================== Module2: Hotspot Detection ==================\n// Detect carbon emission hotspots based on a percentile threshold\nvar carbonData = carbonEmission.select(0);  // 选择图像的第一个波段\n\n// Calculate the 95th percentile threshold\nvar threshold = carbonData.reduceRegion({\n  reducer: ee.Reducer.percentile([95]),\n  geometry: carbonEmission.geometry(),\n  scale: 30,  // 根据分辨率调整\n  maxPixels: 1e8\n}).get('BTHemission'); // 根据文件名称调整键值\n\n// Create a binary mask for hotspots\nvar hotspots = carbonData.gt(threshold).rename('hotspots');\n\n// ================== Module3: Clustering Analysis ==================\n// Apply KMeans clustering to categorize carbon emission intensity\nvar validPixels = carbonData.updateMask(carbonData.gt(0)).sample({\n  region: carbonEmission.geometry(),\n  scale: 30,\n  numPixels: 5000\n});\n\nvar kmeans = ee.Clusterer.wekaKMeans(5).train(validPixels);\n\n// Classify the image using the trained clusterer\nvar clusteredData = carbonData.cluster(kmeans).rename('clusters');\n\n// ================== Module4: Visualization ==================\nMap.centerObject(carbonEmission, 6);\n\nMap.addLayer(hotspots, {\n  min: 0,\n  max: 1,\n  palette: ['000000', 'ff0000']\n}, 'Hotspots');\n\nMap.addLayer(clusteredData, {\n  min: 0,\n  max: 4,\n  palette: ['blue', 'green', 'yellow', 'orange', 'red']\n}, 'Clusters');\n\n// ================== Output Visualization ==================\n",
    "api": [
        "ee.Image",
        "ee.Image.select",
        "ee.Reducer.percentile",
        "ee.Image.reduceRegion",
        "ee.Image.gt",
        "ee.Image.rename",
        "ee.Clusterer.wekaKMeans",
        "ee.Clusterer.train",
        "ee.Image.updateMask",
        "ee.Image.sample",
        "ee.Image.cluster",
        "Map.centerObject",
        "Map.addLayer"
    ],
    "processing step": [
        "Load carbon emission raster data",
        "Select the first band of the image",
        "Calculate 95th percentile threshold",
        "Create binary mask for hotspots",
        "Sample valid pixels for clustering",
        "Train KMeans clusterer with sample data",
        "Classify image using trained clusterer",
        "Visualize hotspots and clustered data"
    ],
    "output": "Map showing carbon emission hotspots and clusters."
}