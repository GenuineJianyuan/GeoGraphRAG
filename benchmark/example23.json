{
    "query": "Restaurant hotspots analysis",
    "datasource": [
        "Administrative boundary vector data",
        "Point of Interest vector data"
    ],
    "raw_code": "// ================== Module 1: Data Loading ==================\nvar nycBoundary = ee.FeatureCollection(\"TIGER/2018/States\")\n  .filter(ee.Filter.eq('STUSPS', 'NY'))\n  .geometry();\n\nvar osmRestaurants = ee.FeatureCollection(\"users/your_user/OSM_restaurants_nyc\");\n\n// ================== Module 3: Kernel Density Estimation ==================\nvar bufferRadius = 500;\nvar bufferedRestaurants = osmRestaurants.map(function(feature) {\n  return feature.buffer(bufferRadius);\n});\n\nvar densityImage = bufferedRestaurants.reduceToImage({\n  properties: ['buffer'], \n  reducer: ee.Reducer.count()\n}).clip(nycBoundary);\n\n// ================== Module 4: Clipping and Visualization ==================\nvar clippedDensity = densityImage.clip(nycBoundary);\n\nMap.centerObject(nycBoundary, 10);\nMap.addLayer(clippedDensity, {min: 0, max: 50, palette: ['blue', 'green', 'yellow', 'red']}, 'Restaurant Density Heatmap');\n\nvar chart = ui.Chart.image.regions({\n  image: clippedDensity,\n  regions: osmRestaurants,\n  reducer: ee.Reducer.mean(),\n  scale: 30\n});",
    "api": [
        "ee.FeatureCollection",
        "ee.Filter.eq",
        "ee.Geometry.geometry",
        "ee.FeatureCollection.map",
        "ee.Feature.buffer",
        "ee.Reducer.count",
        "ee.Image.clip",
        "Map.centerObject",
        "Map.addLayer",
        "ui.Chart.image.regions"
    ],
    "processing step": [
        "Load geographic boundary data",
        "Load restaurant point data",
        "Buffer restaurant points",
        "Calculate kernel density",
        "Clip density image",
        "Visualize density heatmap",
        "Create chart for density analysis"
    ],
    "output": "The output is a **map** of restaurant density heatmap."
}