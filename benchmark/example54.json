{
    "query": "Land cover clustering using Landsat7 imagery",
    "datasource": [
        "Landsat7 TOA annual composite",
        "User-defined region of interest (vector)"
    ],
    "raw_code": "/**** Start of imports. If edited, may not auto-convert in the playground. ****/\nvar input = ee.Image(\"LANDSAT/LE7_TOA_1YEAR/2001\"),\n    region = \n    /* color: #98ff00 */\n    /* displayProperties: [\n      {\n        \"type\": \"rectangle\"\n      }\n    ] */\n    ee.Geometry.Polygon(\n        [[[58.70538939538676, 42.79320200009768],\n          [58.70538939538676, 8.556330996235099],\n          [111.26398314538676, 8.556330996235099],\n          [111.26398314538676, 42.79320200009768]]], null, false);\n/***** End of imports. If edited, may not auto-convert in the playground. *****/\n// Load a pre-computed Landsat composite for input.\n\n// Define a region in which to generate a sample of the input.\n\n// Display the sample region.\nMap.centerObject(region, 4);\nMap.addLayer(ee.Image().paint(region, 0, 2), {}, 'region');\n\n// Make the training dataset.\nvar training = input.sample({\n  region: region,\n  scale: 30,\n  numPixels: 5000\n});\n \n// Instantiate the clusterer and train it.\nvar clusterer = ee.Clusterer.wekaKMeans(10).train(training);\n\n// Cluster the input using the trained clusterer.\nvar result = input.cluster(clusterer);\n\n// Display the clusters with random colors.\nMap.addLayer(result.randomVisualizer().clip(region), {}, 'clusters');",
    "api": [
        "ee.Image",
        "ee.Geometry.Polygon",
        "Map.centerObject",
        "Map.addLayer",
        "ee.Image.paint",
        "ee.Image.sample",
        "ee.Clusterer.wekaKMeans",
        "ee.Clusterer.train",
        "ee.Image.cluster",
        "ee.Image.randomVisualizer",
        "ee.Image.clip"
    ],
    "processing step": [
        "Load pre-computed Landsat image as input",
        "Define a polygon region for sampling",
        "Display the defined region on the map",
        "Sample input image within the region",
        "Instantiate and train KMeans clusterer",
        "Cluster the input image using the trained clusterer",
        "Display clustered results with random colors"
    ],
    "output": "**Map of clustered land cover types**"
}