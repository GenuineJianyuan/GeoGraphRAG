{
    "query": "Carbon emissions analysis",
    "datasource": [
        "vector data (administrative boundaries)",
        "tabular data (carbon emissions)",
        "user-defined geometry"
    ],
    "raw_code": "// Define the time range and area of interest (Beijing).\nvar startDate = '2010-01-01';\nvar endDate = '2020-12-31';\nvar geometry = ee.Geometry.Polygon(\n  [[\n    [116.2, 39.4],\n    [116.2, 40.0],\n    [117.0, 40.0],\n    [117.0, 39.4]\n  ]]\n);\n\n// Load the shapefile for Beijing administrative boundaries (shapefile should be uploaded to GEE).\nvar beijing_shp = ee.FeatureCollection('users/your_username/beijing_districts');\n\n// Example: Carbon emissions data for the years (usually loaded via CSV or external data source).\n// Assuming CSV data has been uploaded as an asset.\nvar emissionsData = ee.FeatureCollection('users/your_username/beijing_carbon_emissions');\n\n// Merge the emissions data with the district boundaries.\nvar merged = beijing_shp.map(function(feature) {\n  var countyName = feature.get('CountyName');\n  var emissions = emissionsData.filter(ee.Filter.eq('CountyName', countyName))\n                               .first()\n                               .get('Emission');\n  return feature.set('Emission', emissions);\n});\n\n// Calculate total emissions by district.\nvar totalEmissions = merged.reduceColumns({\n  reducer: ee.Reducer.sum(),\n  selectors: ['Emission']\n}).get('sum');\n\n// Visualize spatial distribution of emissions.\nvar visParams = {\n  min: 0,\n  max: 5000,\n  palette: ['blue', 'green', 'yellow', 'red']\n};\n\nMap.centerObject(beijing_shp, 10);\nMap.addLayer(merged, visParams, 'Total Emissions');\n\n// Create a time series chart\nvar district = 'Chaoyang';\nvar districtData = emissionsData.filter(ee.Filter.eq('CountyName', district));\n\nvar chart = ui.Chart.feature.byFeature({\n  features: districtData,\n  xProperty: 'Year',\n  yProperties: ['Emission']\n}).setChartType('LineChart')\n  .setOptions({\n    title: 'Carbon Emissions Trend for ' + district,\n    hAxis: {title: 'Year'},\n    vAxis: {title: 'Emissions (Units)'}\n  });\n\nprint(chart);\n\n// Bar chart for 2017\nvar emissions2017 = emissionsData.filter(ee.Filter.eq('Year', 2017));\nvar barChart = ui.Chart.feature.byFeature({\n  features: emissions2017,\n  xProperty: 'CountyName',\n  yProperties: ['Emission']\n}).setChartType('ColumnChart')\n  .setOptions({\n    title: 'Carbon Emissions in 2017 by District',\n    hAxis: {title: 'District'},\n    vAxis: {title: 'Emissions (Units)'},\n    height: 500,\n    width: 800\n  });\n\nprint(barChart);",
    "api": [
        "ee.Geometry.Polygon",
        "ee.FeatureCollection",
        "ee.Filter.eq",
        "ee.Reducer.sum",
        "Map.centerObject",
        "Map.addLayer",
        "ui.Chart.feature.byFeature"
    ],
    "processing step": [
        "Define time range and area of interest.",
        "Load administrative boundaries shapefile.",
        "Load carbon emissions data.",
        "Merge emissions data with boundaries.",
        "Calculate total emissions by district.",
        "Visualize spatial distribution of emissions.",
        "Create emissions trend time series chart.",
        "Generate bar chart for specific year."
    ],
    "output": "**Map of total emissions distribution**"
}