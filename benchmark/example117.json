{
    "query": "PCA analysis",
    "datasource": [
        "Sentinel-2",
        "vector data"
    ],
    "raw_code": "// PCA analysis\nvar LeZhiXian = \n    /* color: #98ff00 */\n    /* shown: false */\n    ee.Geometry.Polygon(\n        [[[116.02116319983233, 29.095141315194134],\n          [116.03352281897295, 29.05073173840886],\n          [116.09394762366045, 29.04953121401721],\n          [116.12004015295733, 29.10954031020994]]], null, false);\n// 1. 数据筛选和镶嵌\nvar sentinelCollection = ee.ImageCollection(\"COPERNICUS/S2\")\n  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))\n  .filterDate('2021-08-01', '2021-08-08')\n  // .filterBounds(LeZhiXian); // 请替换为 LeZhiXian 的实际坐标\n\nvar mosaicImage = sentinelCollection.mosaic()\n   .clip(LeZhiXian); // 请替换为 LeZhiXian 的实际坐标\n\n// 2. 波段选择\nvar bands = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9', 'B10', 'B11', 'B12'];\nvar selectedImage = mosaicImage.select(bands);\n\n// 3. PCA函数的输入参数\nvar region = LeZhiXian;\nvar scale = 10;\nvar bandNames = selectedImage.bandNames();\n\n// 4. 数据平均\nvar means = selectedImage.reduceRegion({\n  reducer: ee.Reducer.mean(),\n  geometry: region,\n  scale: scale,\n  maxPixels: 1e9\n});\n\n// 5. 主成分分析函数\n// 主成分分析函数\nfunction getPrincipalComponents(image, scale, region) {\n  // 中心化图像\n  var centered = image.subtract(means);\n\n  // 将中心化后的图像转换为数组\n  var centeredArray = centered.toArray();\n\n  // 计算协方差矩阵\n  var covar = centeredArray.reduceRegion({\n    reducer: ee.Reducer.centeredCovariance(),\n    geometry: region,\n    scale: scale,\n    maxPixels: 1e9\n  });\n\n  // 获取协方差数组\n  var covarArray = ee.Array(covar.get('array'));\n\n  // 执行特征值分解\n  var eigens = covarArray.eigen();\n\n  // 从特征值分解结果中提取特征值和特征向量\n  var eigenValues = eigens.slice(1, 0, 1);\n  var eigenVectors = eigens.slice(1, 1);\n\n  // 将中心化数组转换为二维阵列\n  var arrayImage = centeredArray.toArray(1);\n\n  // 使用特征向量矩阵左乘图像阵列，得到主成分图像\n var principalComponents = ee.Image(eigenVectors)\n    .matrixMultiply(arrayImage)\n    .arrayProject([0])\n    .arrayFlatten([['pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8', 'pc9', 'pc10', 'pc11', 'pc12', 'pc13']]);\n\n\n  return principalComponents;\n}\n\n// 计算各波段均值\nvar means = selectedImage.reduceRegion({\n  reducer: ee.Reducer.mean(),\n  geometry: region,\n  scale: scale,\n  maxPixels: 1e9\n}).toImage();\n\n// 创建均值中心化的图像\nvar centeredImage = selectedImage.subtract(means);\n\n// 然后，您可以将 centeredImage 作为参数传递给 getPrincipalComponents 函数\nvar pcImage = getPrincipalComponents(centeredImage, scale, region);\nMap.addLayer(pcImage, {bands: ['pc1', 'pc2', 'pc3'], min: -2, max: 2}, 'PCA');",
    "api": [
        "ee.Geometry.Polygon",
        "ee.ImageCollection.filter",
        "ee.Filter.lt",
        "ee.ImageCollection.filterDate",
        "ee.ImageCollection.mosaic",
        "ee.Image.clip",
        "ee.Image.select",
        "ee.Reducer.mean",
        "ee.Image.reduceRegion",
        "ee.Image.subtract",
        "ee.Image.toArray",
        "ee.Reducer.centeredCovariance",
        "ee.Array.eigen",
        "ee.Array.slice",
        "ee.Image.matrixMultiply",
        "ee.Image.arrayProject",
        "ee.Image.arrayFlatten",
        "ee.Image.toImage"
    ],
    "processing step": [
        "Define study area polygon.",
        "Filter and mosaic Sentinel-2 images.",
        "Select specific spectral bands.",
        "Calculate mean values for bands.",
        "Center image using mean values.",
        "Compute covariance matrix for PCA.",
        "Perform eigenvalue decomposition.",
        "Transform image to principal components.",
        "Visualize PCA results."
    ],
    "output": "Imagery of principal components."
}