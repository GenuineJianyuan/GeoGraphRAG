{
    "query": "Center-pivot irrigation detection",
    "datasource": [
        "Landsat8 TOA影像"
    ],
    "raw_code": "// Center-pivot Irrigation Detector.\n//\n// Finds circles that are 500m in radius.\nMap.setCenter(-106.06, 37.71, 12);\n\n// A nice NDVI palette.\nvar palette = [\n  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',\n  '74A901', '66A000', '529400', '3E8601', '207401', '056201',\n  '004C00', '023B01', '012E01', '011D01', '011301'];\n\n// Just display the image with the palette.\nvar image = ee.Image('LANDSAT/LC08/C02/T1_TOA/LC08_034034_20170608');\nvar ndvi = image.normalizedDifference(['B5','B4']);\n\nMap.addLayer(ndvi, {min: 0, max: 1, palette: palette}, 'Landsat NDVI');\n\n// Find the difference between convolution with circles and squares.\n// This difference, in theory, will be strongest at the center of\n// circles in the image. This region is filled with circular farms\n// with radii on the order of 500m.\nvar farmSize = 500;  // Radius of a farm, in meters.\nvar circleKernel = ee.Kernel.circle(farmSize, 'meters');\nvar squareKernel = ee.Kernel.square(farmSize, 'meters');\nvar circles = ndvi.convolve(circleKernel);\nvar squares = ndvi.convolve(squareKernel);\nvar diff = circles.subtract(squares);\n\n// Scale by 100 and find the best fitting pixel in each neighborhood.\nvar diff = diff.abs().multiply(100).toByte();\nvar max = diff.focal_max({radius: farmSize * 1.8, units: 'meters'});\n// If a pixel isn't the local max, set it to 0.\nvar local = diff.where(diff.neq(max), 0);\nvar thresh = local.gt(2);\n\n// Here, we highlight the maximum differences as \"Kernel Peaks\"\n// and draw them in red.\nvar peaks = thresh.focal_max({kernel: circleKernel});\nMap.addLayer(peaks.updateMask(peaks), {palette: 'FF3737'}, 'Kernel Peaks');\n\n// Detect the edges of the features.  Discard the edges with lower intensity.\nvar canny = ee.Algorithms.CannyEdgeDetector(ndvi, 0);\ncanny = canny.gt(0.3)\n\n// Create a \"ring\" kernel from two circular kernels.\nvar inner = ee.Kernel.circle(farmSize - 20, 'meters', false, -1);\nvar outer = ee.Kernel.circle(farmSize + 20, 'meters', false, 1);\nvar ring = outer.add(inner, true);\n\n// Highlight the places where the feature edges best match the circle kernel.\nvar centers = canny.convolve(ring).gt(0.5).focal_max({kernel: circleKernel});\nMap.addLayer(centers.updateMask(centers), {palette: '4285FF'}, 'Ring centers');",
    "api": [
        "ee.Image.normalizedDifference",
        "Map.addLayer",
        "ee.Kernel.circle",
        "ee.Kernel.square",
        "ee.Image.convolve",
        "ee.Image.subtract",
        "ee.Image.abs",
        "ee.Image.multiply",
        "ee.Image.toByte",
        "ee.Image.focal_max",
        "ee.Image.where",
        "ee.Image.gt",
        "ee.Algorithms.CannyEdgeDetector",
        "ee.Kernel.add"
    ],
    "processing step": [
        "Load and display NDVI image with custom palette.",
        "Define kernels for circle and square convolution.",
        "Compute difference between circle and square convolutions.",
        "Find local maxima in the difference image.",
        "Apply threshold to isolate significant maxima.",
        "Detect edges using Canny edge detector.",
        "Create ring kernel for edge matching.",
        "Highlight centers where edges match the ring kernel."
    ],
    "output": "Map highlighting circular irrigation patterns."
}